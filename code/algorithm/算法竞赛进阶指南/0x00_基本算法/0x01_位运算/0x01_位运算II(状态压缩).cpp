// 左移(<<): 在二进制表示下把数字同时向左移动, 低位以 0 填充, 高位越界后舍弃
//           1) 1 << n = n^2        2) n << 1 = 2n
//
// 右移(>>):在二进制补码表示下把数字同时向右移动, 高位以符号位填充, 低位越界后舍弃
//              n >> 1 = n/2 (向下取整)
//
// 二进制状态压缩是指, 将一个长度为 m 的 bool 数组用一个 m 位二进制整数表示并存储的方法
// 利用下列位运算可以实现对 bool 数组对应下标的元素提取
//           操作                                           运算
// 取出整数 n 在二进制表示下的 k 位                       (n >> k) & 1
// 取出整数 n 在二进制表示下的第 0 ~ k-1 位(后 k 位)      n & ((1 << k) - 1)
// 把整数 n 在二进制表示下的第 k 位取反                   n xor (1 << k)
// 对整数在二进制表示下的第 k 位赋值 1                    n | (1 << k)
// 对整数在二进制表示下的第 k 位赋值 0                    n & (1 << k)
//
// m 不太大时可以直接使用一个整数类型存储, m 较大时, 可以使用若干整数类型存储
#include <iostream>

using namespace std;

void test1()
{
    cout << ((-3) >> 1) << endl;    // -2
    cout << (3 >> 1) << endl;       // 1
}

int main()
{
    test1();
    return 0;
}